// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ELBLog.proto

package gobblin.converter.s3;

public final class ELBLogOuterClass {
  private ELBLogOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ELBLogOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ELBLog)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .ServerLogHeader header = 1;</code>
     */
    boolean hasHeader();
    /**
     * <code>required .ServerLogHeader header = 1;</code>
     */
    gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader getHeader();
    /**
     * <code>required .ServerLogHeader header = 1;</code>
     */
    gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>required string elb_name = 2;</code>
     *
     * <pre>
     * The name of the load balancer
     * </pre>
     */
    boolean hasElbName();
    /**
     * <code>required string elb_name = 2;</code>
     *
     * <pre>
     * The name of the load balancer
     * </pre>
     */
    java.lang.String getElbName();
    /**
     * <code>required string elb_name = 2;</code>
     *
     * <pre>
     * The name of the load balancer
     * </pre>
     */
    com.google.protobuf.ByteString
        getElbNameBytes();

    /**
     * <code>required int32 elb_status_code = 3;</code>
     *
     * <pre>
     * The status of an intermediary element of a request
     * </pre>
     */
    boolean hasElbStatusCode();
    /**
     * <code>required int32 elb_status_code = 3;</code>
     *
     * <pre>
     * The status of an intermediary element of a request
     * </pre>
     */
    int getElbStatusCode();

    /**
     * <code>optional string client_to_server_ssl_cipher = 4;</code>
     *
     * <pre>
     * The SSL cipher
     * </pre>
     */
    boolean hasClientToServerSslCipher();
    /**
     * <code>optional string client_to_server_ssl_cipher = 4;</code>
     *
     * <pre>
     * The SSL cipher
     * </pre>
     */
    java.lang.String getClientToServerSslCipher();
    /**
     * <code>optional string client_to_server_ssl_cipher = 4;</code>
     *
     * <pre>
     * The SSL cipher
     * </pre>
     */
    com.google.protobuf.ByteString
        getClientToServerSslCipherBytes();

    /**
     * <code>optional string client_to_server_ssl_protocol = 5;</code>
     *
     * <pre>
     * The SSL protocol
     * </pre>
     */
    boolean hasClientToServerSslProtocol();
    /**
     * <code>optional string client_to_server_ssl_protocol = 5;</code>
     *
     * <pre>
     * The SSL protocol
     * </pre>
     */
    java.lang.String getClientToServerSslProtocol();
    /**
     * <code>optional string client_to_server_ssl_protocol = 5;</code>
     *
     * <pre>
     * The SSL protocol
     * </pre>
     */
    com.google.protobuf.ByteString
        getClientToServerSslProtocolBytes();

    /**
     * <code>optional double request_processing_time = 6;</code>
     *
     * <pre>
     * Time (seconds): load balancer request receive -&gt; sent it to a registered instance. (step 1/3)
     * </pre>
     */
    boolean hasRequestProcessingTime();
    /**
     * <code>optional double request_processing_time = 6;</code>
     *
     * <pre>
     * Time (seconds): load balancer request receive -&gt; sent it to a registered instance. (step 1/3)
     * </pre>
     */
    double getRequestProcessingTime();

    /**
     * <code>optional double backend_processing_time = 7;</code>
     *
     * <pre>
     * Time (seconds): load balancer sent to instance -&gt; instance starts to send response header (step 2/3)
     * </pre>
     */
    boolean hasBackendProcessingTime();
    /**
     * <code>optional double backend_processing_time = 7;</code>
     *
     * <pre>
     * Time (seconds): load balancer sent to instance -&gt; instance starts to send response header (step 2/3)
     * </pre>
     */
    double getBackendProcessingTime();

    /**
     * <code>optional double response_processing_time = 8;</code>
     *
     * <pre>
     * Time (seconds): Response header receive -&gt; start of send response to client. (step 3/3)
     * </pre>
     */
    boolean hasResponseProcessingTime();
    /**
     * <code>optional double response_processing_time = 8;</code>
     *
     * <pre>
     * Time (seconds): Response header receive -&gt; start of send response to client. (step 3/3)
     * </pre>
     */
    double getResponseProcessingTime();
  }
  /**
   * Protobuf type {@code ELBLog}
   *
   * <pre>
   * Represents an ELB log file. Inherits most log information from the ServerLogHeader and implements 
   * ELB-specific fields.
   * For more info on the format, see
   *    - Amazon Elastic Load Balancing Log Entries: http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/access-log-collection.html#access-log-entry-format
   * </pre>
   */
  public static final class ELBLog extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:ELBLog)
      ELBLogOrBuilder {
    // Use ELBLog.newBuilder() to construct.
    private ELBLog(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ELBLog(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ELBLog defaultInstance;
    public static ELBLog getDefaultInstance() {
      return defaultInstance;
    }

    public ELBLog getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ELBLog(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = header_.toBuilder();
              }
              header_ = input.readMessage(gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(header_);
                header_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              elbName_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              elbStatusCode_ = input.readInt32();
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              clientToServerSslCipher_ = bs;
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              clientToServerSslProtocol_ = bs;
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              requestProcessingTime_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              backendProcessingTime_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              responseProcessingTime_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gobblin.converter.s3.ELBLogOuterClass.internal_static_ELBLog_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gobblin.converter.s3.ELBLogOuterClass.internal_static_ELBLog_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gobblin.converter.s3.ELBLogOuterClass.ELBLog.class, gobblin.converter.s3.ELBLogOuterClass.ELBLog.Builder.class);
    }

    public static com.google.protobuf.Parser<ELBLog> PARSER =
        new com.google.protobuf.AbstractParser<ELBLog>() {
      public ELBLog parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ELBLog(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ELBLog> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int HEADER_FIELD_NUMBER = 1;
    private gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader header_;
    /**
     * <code>required .ServerLogHeader header = 1;</code>
     */
    public boolean hasHeader() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ServerLogHeader header = 1;</code>
     */
    public gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader getHeader() {
      return header_;
    }
    /**
     * <code>required .ServerLogHeader header = 1;</code>
     */
    public gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeaderOrBuilder getHeaderOrBuilder() {
      return header_;
    }

    public static final int ELB_NAME_FIELD_NUMBER = 2;
    private java.lang.Object elbName_;
    /**
     * <code>required string elb_name = 2;</code>
     *
     * <pre>
     * The name of the load balancer
     * </pre>
     */
    public boolean hasElbName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string elb_name = 2;</code>
     *
     * <pre>
     * The name of the load balancer
     * </pre>
     */
    public java.lang.String getElbName() {
      java.lang.Object ref = elbName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          elbName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string elb_name = 2;</code>
     *
     * <pre>
     * The name of the load balancer
     * </pre>
     */
    public com.google.protobuf.ByteString
        getElbNameBytes() {
      java.lang.Object ref = elbName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        elbName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ELB_STATUS_CODE_FIELD_NUMBER = 3;
    private int elbStatusCode_;
    /**
     * <code>required int32 elb_status_code = 3;</code>
     *
     * <pre>
     * The status of an intermediary element of a request
     * </pre>
     */
    public boolean hasElbStatusCode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 elb_status_code = 3;</code>
     *
     * <pre>
     * The status of an intermediary element of a request
     * </pre>
     */
    public int getElbStatusCode() {
      return elbStatusCode_;
    }

    public static final int CLIENT_TO_SERVER_SSL_CIPHER_FIELD_NUMBER = 4;
    private java.lang.Object clientToServerSslCipher_;
    /**
     * <code>optional string client_to_server_ssl_cipher = 4;</code>
     *
     * <pre>
     * The SSL cipher
     * </pre>
     */
    public boolean hasClientToServerSslCipher() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string client_to_server_ssl_cipher = 4;</code>
     *
     * <pre>
     * The SSL cipher
     * </pre>
     */
    public java.lang.String getClientToServerSslCipher() {
      java.lang.Object ref = clientToServerSslCipher_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          clientToServerSslCipher_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string client_to_server_ssl_cipher = 4;</code>
     *
     * <pre>
     * The SSL cipher
     * </pre>
     */
    public com.google.protobuf.ByteString
        getClientToServerSslCipherBytes() {
      java.lang.Object ref = clientToServerSslCipher_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clientToServerSslCipher_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CLIENT_TO_SERVER_SSL_PROTOCOL_FIELD_NUMBER = 5;
    private java.lang.Object clientToServerSslProtocol_;
    /**
     * <code>optional string client_to_server_ssl_protocol = 5;</code>
     *
     * <pre>
     * The SSL protocol
     * </pre>
     */
    public boolean hasClientToServerSslProtocol() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string client_to_server_ssl_protocol = 5;</code>
     *
     * <pre>
     * The SSL protocol
     * </pre>
     */
    public java.lang.String getClientToServerSslProtocol() {
      java.lang.Object ref = clientToServerSslProtocol_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          clientToServerSslProtocol_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string client_to_server_ssl_protocol = 5;</code>
     *
     * <pre>
     * The SSL protocol
     * </pre>
     */
    public com.google.protobuf.ByteString
        getClientToServerSslProtocolBytes() {
      java.lang.Object ref = clientToServerSslProtocol_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clientToServerSslProtocol_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REQUEST_PROCESSING_TIME_FIELD_NUMBER = 6;
    private double requestProcessingTime_;
    /**
     * <code>optional double request_processing_time = 6;</code>
     *
     * <pre>
     * Time (seconds): load balancer request receive -&gt; sent it to a registered instance. (step 1/3)
     * </pre>
     */
    public boolean hasRequestProcessingTime() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double request_processing_time = 6;</code>
     *
     * <pre>
     * Time (seconds): load balancer request receive -&gt; sent it to a registered instance. (step 1/3)
     * </pre>
     */
    public double getRequestProcessingTime() {
      return requestProcessingTime_;
    }

    public static final int BACKEND_PROCESSING_TIME_FIELD_NUMBER = 7;
    private double backendProcessingTime_;
    /**
     * <code>optional double backend_processing_time = 7;</code>
     *
     * <pre>
     * Time (seconds): load balancer sent to instance -&gt; instance starts to send response header (step 2/3)
     * </pre>
     */
    public boolean hasBackendProcessingTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double backend_processing_time = 7;</code>
     *
     * <pre>
     * Time (seconds): load balancer sent to instance -&gt; instance starts to send response header (step 2/3)
     * </pre>
     */
    public double getBackendProcessingTime() {
      return backendProcessingTime_;
    }

    public static final int RESPONSE_PROCESSING_TIME_FIELD_NUMBER = 8;
    private double responseProcessingTime_;
    /**
     * <code>optional double response_processing_time = 8;</code>
     *
     * <pre>
     * Time (seconds): Response header receive -&gt; start of send response to client. (step 3/3)
     * </pre>
     */
    public boolean hasResponseProcessingTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional double response_processing_time = 8;</code>
     *
     * <pre>
     * Time (seconds): Response header receive -&gt; start of send response to client. (step 3/3)
     * </pre>
     */
    public double getResponseProcessingTime() {
      return responseProcessingTime_;
    }

    private void initFields() {
      header_ = gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.getDefaultInstance();
      elbName_ = "";
      elbStatusCode_ = 0;
      clientToServerSslCipher_ = "";
      clientToServerSslProtocol_ = "";
      requestProcessingTime_ = 0D;
      backendProcessingTime_ = 0D;
      responseProcessingTime_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasHeader()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasElbName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasElbStatusCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getHeader().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, header_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getElbNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, elbStatusCode_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getClientToServerSslCipherBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getClientToServerSslProtocolBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, requestProcessingTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, backendProcessingTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, responseProcessingTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, header_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getElbNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, elbStatusCode_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getClientToServerSslCipherBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getClientToServerSslProtocolBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, requestProcessingTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, backendProcessingTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, responseProcessingTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gobblin.converter.s3.ELBLogOuterClass.ELBLog parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gobblin.converter.s3.ELBLogOuterClass.ELBLog prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ELBLog}
     *
     * <pre>
     * Represents an ELB log file. Inherits most log information from the ServerLogHeader and implements 
     * ELB-specific fields.
     * For more info on the format, see
     *    - Amazon Elastic Load Balancing Log Entries: http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/access-log-collection.html#access-log-entry-format
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ELBLog)
        gobblin.converter.s3.ELBLogOuterClass.ELBLogOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gobblin.converter.s3.ELBLogOuterClass.internal_static_ELBLog_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gobblin.converter.s3.ELBLogOuterClass.internal_static_ELBLog_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gobblin.converter.s3.ELBLogOuterClass.ELBLog.class, gobblin.converter.s3.ELBLogOuterClass.ELBLog.Builder.class);
      }

      // Construct using gobblin.converter.s3.ELBLogOuterClass.ELBLog.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHeaderFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.getDefaultInstance();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        elbName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        elbStatusCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        clientToServerSslCipher_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        clientToServerSslProtocol_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        requestProcessingTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        backendProcessingTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        responseProcessingTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gobblin.converter.s3.ELBLogOuterClass.internal_static_ELBLog_descriptor;
      }

      public gobblin.converter.s3.ELBLogOuterClass.ELBLog getDefaultInstanceForType() {
        return gobblin.converter.s3.ELBLogOuterClass.ELBLog.getDefaultInstance();
      }

      public gobblin.converter.s3.ELBLogOuterClass.ELBLog build() {
        gobblin.converter.s3.ELBLogOuterClass.ELBLog result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gobblin.converter.s3.ELBLogOuterClass.ELBLog buildPartial() {
        gobblin.converter.s3.ELBLogOuterClass.ELBLog result = new gobblin.converter.s3.ELBLogOuterClass.ELBLog(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (headerBuilder_ == null) {
          result.header_ = header_;
        } else {
          result.header_ = headerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.elbName_ = elbName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.elbStatusCode_ = elbStatusCode_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.clientToServerSslCipher_ = clientToServerSslCipher_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.clientToServerSslProtocol_ = clientToServerSslProtocol_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.requestProcessingTime_ = requestProcessingTime_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.backendProcessingTime_ = backendProcessingTime_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.responseProcessingTime_ = responseProcessingTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gobblin.converter.s3.ELBLogOuterClass.ELBLog) {
          return mergeFrom((gobblin.converter.s3.ELBLogOuterClass.ELBLog)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gobblin.converter.s3.ELBLogOuterClass.ELBLog other) {
        if (other == gobblin.converter.s3.ELBLogOuterClass.ELBLog.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.hasElbName()) {
          bitField0_ |= 0x00000002;
          elbName_ = other.elbName_;
          onChanged();
        }
        if (other.hasElbStatusCode()) {
          setElbStatusCode(other.getElbStatusCode());
        }
        if (other.hasClientToServerSslCipher()) {
          bitField0_ |= 0x00000008;
          clientToServerSslCipher_ = other.clientToServerSslCipher_;
          onChanged();
        }
        if (other.hasClientToServerSslProtocol()) {
          bitField0_ |= 0x00000010;
          clientToServerSslProtocol_ = other.clientToServerSslProtocol_;
          onChanged();
        }
        if (other.hasRequestProcessingTime()) {
          setRequestProcessingTime(other.getRequestProcessingTime());
        }
        if (other.hasBackendProcessingTime()) {
          setBackendProcessingTime(other.getBackendProcessingTime());
        }
        if (other.hasResponseProcessingTime()) {
          setResponseProcessingTime(other.getResponseProcessingTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHeader()) {
          
          return false;
        }
        if (!hasElbName()) {
          
          return false;
        }
        if (!hasElbStatusCode()) {
          
          return false;
        }
        if (!getHeader().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gobblin.converter.s3.ELBLogOuterClass.ELBLog parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gobblin.converter.s3.ELBLogOuterClass.ELBLog) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader header_ = gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader, gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.Builder, gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeaderOrBuilder> headerBuilder_;
      /**
       * <code>required .ServerLogHeader header = 1;</code>
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ServerLogHeader header = 1;</code>
       */
      public gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader getHeader() {
        if (headerBuilder_ == null) {
          return header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>required .ServerLogHeader header = 1;</code>
       */
      public Builder setHeader(gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerLogHeader header = 1;</code>
       */
      public Builder setHeader(
          gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerLogHeader header = 1;</code>
       */
      public Builder mergeHeader(gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              header_ != gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.getDefaultInstance()) {
            header_ =
              gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ServerLogHeader header = 1;</code>
       */
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.getDefaultInstance();
          onChanged();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .ServerLogHeader header = 1;</code>
       */
      public gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>required .ServerLogHeader header = 1;</code>
       */
      public gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_;
        }
      }
      /**
       * <code>required .ServerLogHeader header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader, gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.Builder, gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader, gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeader.Builder, gobblin.converter.s3.ServerLogHeaderOuterClass.ServerLogHeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private java.lang.Object elbName_ = "";
      /**
       * <code>required string elb_name = 2;</code>
       *
       * <pre>
       * The name of the load balancer
       * </pre>
       */
      public boolean hasElbName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string elb_name = 2;</code>
       *
       * <pre>
       * The name of the load balancer
       * </pre>
       */
      public java.lang.String getElbName() {
        java.lang.Object ref = elbName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            elbName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string elb_name = 2;</code>
       *
       * <pre>
       * The name of the load balancer
       * </pre>
       */
      public com.google.protobuf.ByteString
          getElbNameBytes() {
        java.lang.Object ref = elbName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          elbName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string elb_name = 2;</code>
       *
       * <pre>
       * The name of the load balancer
       * </pre>
       */
      public Builder setElbName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        elbName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string elb_name = 2;</code>
       *
       * <pre>
       * The name of the load balancer
       * </pre>
       */
      public Builder clearElbName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        elbName_ = getDefaultInstance().getElbName();
        onChanged();
        return this;
      }
      /**
       * <code>required string elb_name = 2;</code>
       *
       * <pre>
       * The name of the load balancer
       * </pre>
       */
      public Builder setElbNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        elbName_ = value;
        onChanged();
        return this;
      }

      private int elbStatusCode_ ;
      /**
       * <code>required int32 elb_status_code = 3;</code>
       *
       * <pre>
       * The status of an intermediary element of a request
       * </pre>
       */
      public boolean hasElbStatusCode() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 elb_status_code = 3;</code>
       *
       * <pre>
       * The status of an intermediary element of a request
       * </pre>
       */
      public int getElbStatusCode() {
        return elbStatusCode_;
      }
      /**
       * <code>required int32 elb_status_code = 3;</code>
       *
       * <pre>
       * The status of an intermediary element of a request
       * </pre>
       */
      public Builder setElbStatusCode(int value) {
        bitField0_ |= 0x00000004;
        elbStatusCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 elb_status_code = 3;</code>
       *
       * <pre>
       * The status of an intermediary element of a request
       * </pre>
       */
      public Builder clearElbStatusCode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        elbStatusCode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object clientToServerSslCipher_ = "";
      /**
       * <code>optional string client_to_server_ssl_cipher = 4;</code>
       *
       * <pre>
       * The SSL cipher
       * </pre>
       */
      public boolean hasClientToServerSslCipher() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string client_to_server_ssl_cipher = 4;</code>
       *
       * <pre>
       * The SSL cipher
       * </pre>
       */
      public java.lang.String getClientToServerSslCipher() {
        java.lang.Object ref = clientToServerSslCipher_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientToServerSslCipher_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string client_to_server_ssl_cipher = 4;</code>
       *
       * <pre>
       * The SSL cipher
       * </pre>
       */
      public com.google.protobuf.ByteString
          getClientToServerSslCipherBytes() {
        java.lang.Object ref = clientToServerSslCipher_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientToServerSslCipher_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string client_to_server_ssl_cipher = 4;</code>
       *
       * <pre>
       * The SSL cipher
       * </pre>
       */
      public Builder setClientToServerSslCipher(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        clientToServerSslCipher_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string client_to_server_ssl_cipher = 4;</code>
       *
       * <pre>
       * The SSL cipher
       * </pre>
       */
      public Builder clearClientToServerSslCipher() {
        bitField0_ = (bitField0_ & ~0x00000008);
        clientToServerSslCipher_ = getDefaultInstance().getClientToServerSslCipher();
        onChanged();
        return this;
      }
      /**
       * <code>optional string client_to_server_ssl_cipher = 4;</code>
       *
       * <pre>
       * The SSL cipher
       * </pre>
       */
      public Builder setClientToServerSslCipherBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        clientToServerSslCipher_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object clientToServerSslProtocol_ = "";
      /**
       * <code>optional string client_to_server_ssl_protocol = 5;</code>
       *
       * <pre>
       * The SSL protocol
       * </pre>
       */
      public boolean hasClientToServerSslProtocol() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string client_to_server_ssl_protocol = 5;</code>
       *
       * <pre>
       * The SSL protocol
       * </pre>
       */
      public java.lang.String getClientToServerSslProtocol() {
        java.lang.Object ref = clientToServerSslProtocol_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clientToServerSslProtocol_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string client_to_server_ssl_protocol = 5;</code>
       *
       * <pre>
       * The SSL protocol
       * </pre>
       */
      public com.google.protobuf.ByteString
          getClientToServerSslProtocolBytes() {
        java.lang.Object ref = clientToServerSslProtocol_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientToServerSslProtocol_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string client_to_server_ssl_protocol = 5;</code>
       *
       * <pre>
       * The SSL protocol
       * </pre>
       */
      public Builder setClientToServerSslProtocol(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        clientToServerSslProtocol_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string client_to_server_ssl_protocol = 5;</code>
       *
       * <pre>
       * The SSL protocol
       * </pre>
       */
      public Builder clearClientToServerSslProtocol() {
        bitField0_ = (bitField0_ & ~0x00000010);
        clientToServerSslProtocol_ = getDefaultInstance().getClientToServerSslProtocol();
        onChanged();
        return this;
      }
      /**
       * <code>optional string client_to_server_ssl_protocol = 5;</code>
       *
       * <pre>
       * The SSL protocol
       * </pre>
       */
      public Builder setClientToServerSslProtocolBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        clientToServerSslProtocol_ = value;
        onChanged();
        return this;
      }

      private double requestProcessingTime_ ;
      /**
       * <code>optional double request_processing_time = 6;</code>
       *
       * <pre>
       * Time (seconds): load balancer request receive -&gt; sent it to a registered instance. (step 1/3)
       * </pre>
       */
      public boolean hasRequestProcessingTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double request_processing_time = 6;</code>
       *
       * <pre>
       * Time (seconds): load balancer request receive -&gt; sent it to a registered instance. (step 1/3)
       * </pre>
       */
      public double getRequestProcessingTime() {
        return requestProcessingTime_;
      }
      /**
       * <code>optional double request_processing_time = 6;</code>
       *
       * <pre>
       * Time (seconds): load balancer request receive -&gt; sent it to a registered instance. (step 1/3)
       * </pre>
       */
      public Builder setRequestProcessingTime(double value) {
        bitField0_ |= 0x00000020;
        requestProcessingTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double request_processing_time = 6;</code>
       *
       * <pre>
       * Time (seconds): load balancer request receive -&gt; sent it to a registered instance. (step 1/3)
       * </pre>
       */
      public Builder clearRequestProcessingTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        requestProcessingTime_ = 0D;
        onChanged();
        return this;
      }

      private double backendProcessingTime_ ;
      /**
       * <code>optional double backend_processing_time = 7;</code>
       *
       * <pre>
       * Time (seconds): load balancer sent to instance -&gt; instance starts to send response header (step 2/3)
       * </pre>
       */
      public boolean hasBackendProcessingTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double backend_processing_time = 7;</code>
       *
       * <pre>
       * Time (seconds): load balancer sent to instance -&gt; instance starts to send response header (step 2/3)
       * </pre>
       */
      public double getBackendProcessingTime() {
        return backendProcessingTime_;
      }
      /**
       * <code>optional double backend_processing_time = 7;</code>
       *
       * <pre>
       * Time (seconds): load balancer sent to instance -&gt; instance starts to send response header (step 2/3)
       * </pre>
       */
      public Builder setBackendProcessingTime(double value) {
        bitField0_ |= 0x00000040;
        backendProcessingTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double backend_processing_time = 7;</code>
       *
       * <pre>
       * Time (seconds): load balancer sent to instance -&gt; instance starts to send response header (step 2/3)
       * </pre>
       */
      public Builder clearBackendProcessingTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        backendProcessingTime_ = 0D;
        onChanged();
        return this;
      }

      private double responseProcessingTime_ ;
      /**
       * <code>optional double response_processing_time = 8;</code>
       *
       * <pre>
       * Time (seconds): Response header receive -&gt; start of send response to client. (step 3/3)
       * </pre>
       */
      public boolean hasResponseProcessingTime() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional double response_processing_time = 8;</code>
       *
       * <pre>
       * Time (seconds): Response header receive -&gt; start of send response to client. (step 3/3)
       * </pre>
       */
      public double getResponseProcessingTime() {
        return responseProcessingTime_;
      }
      /**
       * <code>optional double response_processing_time = 8;</code>
       *
       * <pre>
       * Time (seconds): Response header receive -&gt; start of send response to client. (step 3/3)
       * </pre>
       */
      public Builder setResponseProcessingTime(double value) {
        bitField0_ |= 0x00000080;
        responseProcessingTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double response_processing_time = 8;</code>
       *
       * <pre>
       * Time (seconds): Response header receive -&gt; start of send response to client. (step 3/3)
       * </pre>
       */
      public Builder clearResponseProcessingTime() {
        bitField0_ = (bitField0_ & ~0x00000080);
        responseProcessingTime_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ELBLog)
    }

    static {
      defaultInstance = new ELBLog(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ELBLog)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ELBLog_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ELBLog_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014ELBLog.proto\032\025ServerLogHeader.proto\"\205\002" +
      "\n\006ELBLog\022 \n\006header\030\001 \002(\0132\020.ServerLogHead" +
      "er\022\020\n\010elb_name\030\002 \002(\t\022\027\n\017elb_status_code\030" +
      "\003 \002(\005\022#\n\033client_to_server_ssl_cipher\030\004 \001" +
      "(\t\022%\n\035client_to_server_ssl_protocol\030\005 \001(" +
      "\t\022\037\n\027request_processing_time\030\006 \001(\001\022\037\n\027ba" +
      "ckend_processing_time\030\007 \001(\001\022 \n\030response_" +
      "processing_time\030\010 \001(\001B\026\n\024gobblin.convert" +
      "er.s3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          gobblin.converter.s3.ServerLogHeaderOuterClass.getDescriptor(),
        }, assigner);
    internal_static_ELBLog_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ELBLog_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_ELBLog_descriptor,
        new java.lang.String[] { "Header", "ElbName", "ElbStatusCode", "ClientToServerSslCipher", "ClientToServerSslProtocol", "RequestProcessingTime", "BackendProcessingTime", "ResponseProcessingTime", });
    gobblin.converter.s3.ServerLogHeaderOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
