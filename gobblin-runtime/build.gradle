// Copyright (C) 2014-2016 LinkedIn Corp. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied.

apply plugin: 'java'

dependencies {
  compile project(":gobblin-admin")
  compile project(":gobblin-api")
  compile project(":gobblin-core")
  compile project(":gobblin-hive-registration")
  compile project(":gobblin-metrics")
  compile project(":gobblin-metastore")
  compile project(":gobblin-utility")
  compile project(path: ':gobblin-rest-service:gobblin-rest-api', configuration: 'restClient')
  compile project(path: ':gobblin-rest-service:gobblin-rest-api', configuration: 'dataTemplate')
  compile project(":gobblin-rest-service:gobblin-rest-server")
  compile project(":gobblin-data-management")

  compile externalDependency.avro
  compile externalDependency.avroMapredH2
  compile externalDependency.commonsCli
  compile externalDependency.commonsConfiguration
  compile externalDependency.commonsEmail
  compile externalDependency.commonsLang
  compile externalDependency.commonsLang3
  compile externalDependency.commonsIo
  compile externalDependency.curatorFramework
  compile externalDependency.curatorClient
  compile externalDependency.curatorRecipes
  compile externalDependency.findBugsAnnotations
  compile externalDependency.gson
  compile externalDependency.guava
  compile externalDependency.guice
  compile externalDependency.httpclient
  compile externalDependency.httpcore
  compile externalDependency.jacksonCore
  compile externalDependency.jacksonMapper
  compile externalDependency.javaxInject
  compile externalDependency.jodaTime
  compile externalDependency.log4j
  compile externalDependency.log4jextras
  compile externalDependency.lombok
  compile externalDependency.metricsCore
  compile externalDependency.metricsJvm
  compile externalDependency.pegasus.data
  compile externalDependency.quartz
  compile externalDependency.slf4j
  compile externalDependency.typesafeConfig
  compile externalDependency.kafka
  compile externalDependency.scala
  compile externalDependency.guavaretrying

  testCompile project(path: ":gobblin-metastore", configuration: "testFixtures")
  testCompile externalDependency.calciteCore
  testCompile externalDependency.calciteAvatica
  testCompile externalDependency.jhyde
  testCompile externalDependency.testng
  testCompile externalDependency.hamcrest
  testCompile externalDependency.byteman
  testCompile externalDependency.bytemanBmunit
  testCompile externalDependency.curatorClient
  testCompile externalDependency.curatorTest
  testCompile externalDependency.mockito
  testRuntime externalDependency.derby

}

// Begin HACK to get around POM being depenendent on the (empty) gobblin-rest-api instead of gobblin-rest-api-rest-client
def installer = install.repositories.mavenInstaller
[installer]*.pom*.whenConfigured {pom ->
    pom.dependencies.find {dep -> dep.groupId == project.group && dep.artifactId == 'gobblin-rest-api' }.artifactId = 'gobblin-rest-api-rest-client'
    pom.dependencies.find {dep -> dep.groupId == project.group && dep.artifactId == 'gobblin-rest-api' }.artifactId = 'gobblin-rest-api-data-template'
}
if (rootProject.publishToMaven) {
    def deployer = uploadArchives.repositories.mavenDeployer
    [deployer]*.pom*.whenConfigured {pom ->
        pom.dependencies.find {dep -> dep.groupId == project.group && dep.artifactId == 'gobblin-rest-api' }.artifactId = 'gobblin-rest-api-rest-client'
        pom.dependencies.find {dep -> dep.groupId == project.group && dep.artifactId == 'gobblin-rest-api' }.artifactId = 'gobblin-rest-api-data-template'
    }
}
// End HACK

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

configurations {
    compile {
        transitive = false
    }
}

artifacts {
    tests testJar
}

test {
    workingDir rootProject.rootDir
    maxParallelForks = 1
}

clean {
  delete "../gobblin-test/locks"
  delete "../gobblin-test/basicTest"
}

ext.classification="library"
