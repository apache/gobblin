/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def getAllDependentProjectsImpl(project) {
  def projectDependencies = project.configurations.runtime.getAllDependencies().withType(ProjectDependency)
  def dependentProjects = projectDependencies*.dependencyProject
  if (dependentProjects.size() > 0) {
    dependentProjects.each { dependentProjects += getAllDependentProjects(it) }
  }
  return dependentProjects.unique()
}

ext.getAllDependentProjects =  {getAllDependentProjectsImpl(it)}

task dotProjectDependencies(description: 'List of gobblin project dependencies in dot format') {
  doLast {
    println "// ========= Start of project dependency graph ======= "
    println "digraph project_dependencies {"
    subprojects.each { Project project ->
      def project_node_name = project.name.replaceAll("-", "_")
      if (project.configurations.findByName("compile") != null) {
        project.configurations.compile.dependencies.each { Dependency dep ->
          if (dep instanceof ProjectDependency) {
            def dep_node_name = dep.dependencyProject.name.replaceAll("-", "_")
            println "\t${project_node_name} -> ${dep_node_name};"
          }
        }
      }
    }
    println "}"
    println "// ========= End of project dependency graph ======= "
  }
}
