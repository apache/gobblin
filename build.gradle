// (c) 2014 LinkedIn Corp. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied.
//

apply plugin: 'idea'
apply plugin: 'eclipse'

ext.build_script_dir = "${projectDir.path}/build_script"

ext.isDefaultEnvironment = !project.hasProperty('overrideBuildEnvironment')

File getEnvironmentScript()
{
  final File env = file(isDefaultEnvironment ? 'defaultEnvironment.gradle' : project.overrideBuildEnvironment)
  assert env.isFile() : "The environment script [$env] does not exists or is not a file."
  return env
}

apply from: environmentScript

if (!project.hasProperty('hadoopVersion')) {
  if (project.hasProperty('useHadoop2')) {
    hadoopVersion = '2.3.0'
  } else {
    hadoopVersion = '1.2.1'
  }
}

if (!project.hasProperty('hiveVersion')) {
  hiveVersion = '0.13.0'
}

if (!project.hasProperty('pegasusVersion')) {
  pegasusVersion = '1.15.9'
}

if (!project.hasProperty('bytemanVersion')) {
  bytemanVersion = '2.2.1'
}

ext.externalDependency = [
  "antlrRuntime": "org.antlr:antlr-runtime:3.0.1",
  "avro": "org.apache.avro:avro:1.7.6",
  "avroMapred": "org.apache.avro:avro-mapred:1.7.6",
  "commonsCli": "commons-cli:commons-cli:1.2",
  "commonsCodec": "commons-codec:commons-codec:1.10",
  "commonsDbcp": "commons-dbcp:commons-dbcp:1.4",
  "commonsEmail": "org.apache.commons:commons-email:1.3.2",
  "commonsLang": "commons-lang:commons-lang:2.4",
  "commonsConfiguration": "commons-configuration:commons-configuration:1.10",
  "commonsIo": "commons-io:commons-io:2.4",
  "commonsHttpClient": "commons-httpclient:commons-httpclient:3.1",
  "datanucleusCore": "org.datanucleus:datanucleus-core:4.0.5",
  "datanucleusRdbms": "org.datanucleus:datanucleus-rdbms:4.0.5",
  "guava": "com.google.guava:guava:15.0",
  "gson": "com.google.code.gson:gson:2.2.4",
  "hadoop": "org.apache.hadoop:hadoop-core:"+hadoopVersion,
  "hadoopCommon": "org.apache.hadoop:hadoop-common:"+hadoopVersion,
  "hadoopClientCore": "org.apache.hadoop:hadoop-mapreduce-client-core:"+hadoopVersion,
  "hadoopClientCommon": "org.apache.hadoop:hadoop-mapreduce-client-common:"+hadoopVersion,
  "hadoopHdfs": "org.apache.hadoop:hadoop-hdfs:"+hadoopVersion,
  "hadoopAuth": "org.apache.hadoop:hadoop-auth:"+hadoopVersion,
  "hiveService": "org.apache.hive:hive-service:"+hiveVersion,
  "hiveJdbc": "org.apache.hive:hive-jdbc:"+hiveVersion,
  "hiveMetastore": "org.apache.hive:hive-metastore:"+hiveVersion,
  "hiveExec": "org.apache.hive:hive-exec:"+hiveVersion,
  "httpclient": "org.apache.httpcomponents:httpclient:4.2.3",
  "httpcore": "org.apache.httpcomponents:httpcore:4.2.1",
  "kafka": "org.apache.kafka:kafka_2.10:0.8.2.1",
  "kafkaTest": "org.apache.kafka:kafka_2.10:0.8.2.1:test",
  "kafkaClient": "org.apache.kafka:kafka-clients:0.8.2.1",
  "quartz": "org.quartz-scheduler:quartz:2.2.1",
  "testng": "org.testng:testng:6.5.1",
  "jacksonCore": "org.codehaus.jackson:jackson-core-asl:1.9.13",
  "jacksonMapper": "org.codehaus.jackson:jackson-mapper-asl:1.9.13",
  "slf4j": "org.slf4j:slf4j-api:1.7.6",
  "log4j": "log4j:log4j:1.2.17",
  "log4jextras": "log4j:apache-log4j-extras:1.2.17",
  "slf4jLog4j": "org.slf4j:slf4j-log4j12:1.7.6",
  "jodaTime": "joda-time:joda-time:1.6",
  "metricsCore": "io.dropwizard.metrics:metrics-core:3.1.0",
  "metricsJvm": "io.dropwizard.metrics:metrics-jvm:3.1.0",
  "metricsGraphite": "io.dropwizard.metrics:metrics-graphite:3.1.0",
  "commonsIO": "commons-io:commons-io:2.4",
  "jsch": "com.jcraft:jsch:0.1.46",
  "jdo2": "javax.jdo:jdo2-api:2.1",
  "azkaban": "com.linkedin.azkaban:azkaban:2.5.0",
  "commonsVfs": "org.apache.commons:commons-vfs2:2.0",
  "mysqlConnector": "mysql:mysql-connector-java:5.1.34",
  "javaxInject": "javax.inject:javax.inject:1",
  "guice": "com.google.inject:guice:3.0",
  "derby": "org.apache.derby:derby:10.11.1.1",
  "mockito": "org.mockito:mockito-core:1.10.19",
  "salesforceWsc": "com.force.api:force-wsc:29.0.0",
  "salesforcePartner": "com.force.api:force-partner-api:29.0.0",
  "scala": "org.scala-lang:scala-library:2.10.3",
  "influxdbJava": "org.influxdb:influxdb-java:1.5",
  "jsr305": "com.google.code.findbugs:jsr305:1.3.9",
  "byteman": "org.jboss.byteman:byteman:"+bytemanVersion,
  "bytemanBmunit": "org.jboss.byteman:byteman-bmunit:"+bytemanVersion,
  "pegasus" : [
    "data" : "com.linkedin.pegasus:data:"+pegasusVersion,
    "generator" : "com.linkedin.pegasus:generator:"+pegasusVersion,
    "restliClient" : "com.linkedin.pegasus:restli-client:"+pegasusVersion,
    "restliServer" : "com.linkedin.pegasus:restli-server:"+pegasusVersion,
    "restliTools" : "com.linkedin.pegasus:restli-tools:"+pegasusVersion,
    "pegasusCommon" : "com.linkedin.pegasus:pegasus-common:"+pegasusVersion,
    "restliCommon" : "com.linkedin.pegasus:restli-common:"+pegasusVersion,
    "r2" : "com.linkedin.pegasus:r2:"+pegasusVersion,
    "d2" : "com.linkedin.pegasus:d2:"+pegasusVersion,
    "restliNettyStandalone" : "com.linkedin.pegasus:restli-netty-standalone:"+pegasusVersion
  ]
];

if (!isDefaultEnvironment)
{
  ext.externalDependency.each { overrideDepKey, overrideDepValue ->
    if (externalDependency[overrideDepKey] != null)
    {
      externalDependency[overrideDepKey] = overrideDepValue
    }
  }
}

task wrapper(type: Wrapper) { gradleVersion = '1.12' }

import javax.tools.ToolProvider

subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
// Disabling the FindBugs plugin for now because FindBugs 2.x is not compatible with Java8
//  apply plugin: 'findbugs'

  sourceCompatibility = JavaVersion.VERSION_1_6

/*  findbugs {
    ignoreFailures = true
    effort = "max"
    excludeFilter = file(rootProject.projectDir.path + "/ligradle/findbugs/findbugsExclude.xml")
  }
*/
  configurations {
    compile
    dependencies {
      if (project.hasProperty('useHadoop2')) {
        compile externalDependency.hadoopCommon
        compile externalDependency.hadoopClientCore
        if (project.name.equals('gobblin-runtime') || project.name.equals('gobblin-test')) {
          compile externalDependency.hadoopClientCommon
        }
      } else {
        compile externalDependency.hadoop
      }
      compile(externalDependency.guava) {
        force = true
      }

      // Required to add JDK's tool jar, which is required to run byteman tests.
      compile (files(((URLClassLoader) ToolProvider.getSystemToolClassLoader()).getURLs()))
    }
  }

  if (isDefaultEnvironment) {
    task sourcesJar(type: Jar, dependsOn: classes) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }
    artifacts { archives sourcesJar }
  }

  // Configure the IDEA plugin to (1) add the codegen as source dirs and (2) work around
  // an apparent bug in the plugin which doesn't set the outputDir/testOutputDir as documented
  idea.module {
    // Gradle docs claim the two settings below are the default, but
    // the actual defaults appear to be "out/production/$MODULE_NAME"
    // and "out/test/$MODULE_NAME". Changing it so IDEA and gradle share
    // the class output directory.

    outputDir = sourceSets.main.output.classesDir
    testOutputDir = sourceSets.test.output.classesDir
  }

  afterEvaluate {
    // add the standard pegasus dependencies wherever the plugin is used
    if (project.plugins.hasPlugin('pegasus')) {
      dependencies {
        dataTemplateCompile externalDependency.pegasus.data
        restClientCompile externalDependency.pegasus.restliClient,externalDependency.pegasus.restliCommon,externalDependency.pegasus.restliTools
      }
    }
  }
}
