apply plugin: 'idea'
apply plugin: 'eclipse'

ext.build_script_dir = "${projectDir.path}/build_script"

ext.isDefaultEnvironment = !project.hasProperty('overrideBuildEnvironment')

File getEnvironmentScript()
{
  final File env = file(isDefaultEnvironment ? 'defaultEnvironment.gradle' : project.overrideBuildEnvironment)
  assert env.isFile() : "The environment script [$env] does not exists or is not a file."
  return env
}

apply from: environmentScript

pegasusVersion = '1.15.9'

ext.externalDependency = [
    "avro": "org.apache.avro:avro:1.7.1",
    "avroMapred": "org.apache.avro:avro-mapred:1.7.6",
    "commonsCli": "commons-cli:commons-cli:1.2",
    "commonsDbcp": "commons-dbcp:commons-dbcp:1.4",
    "commonsEmail": "org.apache.commons:commons-email:1.3.2",
    "commonsLang": "commons-lang:commons-lang:2.4",
    "commonsConfiguration": "commons-configuration:commons-configuration:1.10",
    "commonsIo": "commons-io:commons-io:2.4",
    "commonsHttpClient": "commons-httpclient:commons-httpclient:3.1",
    "guava": "com.google.guava:guava:15.0",
    "gson": "com.google.code.gson:gson:2.2.4",
    "hadoop": "org.apache.hadoop:hadoop-core:1.2.1",
    "hadoopCommon": "org.apache.hadoop:hadoop-common:2.3.0",
    "hadoopClientCore": "org.apache.hadoop:hadoop-mapreduce-client-core:2.3.0",
    "httpclient": "org.apache.httpcomponents:httpclient:4.2.3",
    "httpcore": "org.apache.httpcomponents:httpcore:4.2.1",
    "quartz": "org.quartz-scheduler:quartz:2.2.1",
    "testng": "org.testng:testng:6.5.1",
    "jacksonCore": "org.codehaus.jackson:jackson-core-asl:1.9.13",
    "jacksonMapper": "org.codehaus.jackson:jackson-mapper-asl:1.9.13",
    "slf4j": "org.slf4j:slf4j-api:1.7.6",
    "log4j": "log4j:log4j:1.2.17",
    "log4jextras": "log4j:apache-log4j-extras:1.2.17",
    "slf4jLog4j": "org.slf4j:slf4j-log4j12:1.7.6",
    "jclOverSlf4j": "org.slf4j:jcl-over-slf4j:1.7.6",
    "jodaTime": "joda-time:joda-time:1.6",
    "metricsCore": "com.codahale.metrics:metrics-core:3.0.2",
    "commonsIO": "commons-io:commons-io:2.4",
    "influxdb": "org.influxdb:influxdb-java:1.2",
    "jsch": "com.jcraft:jsch:0.1.46",
    "azkaban": "com.linkedin.azkaban:azkaban:2.5.0",
    "commonsVfs": "org.apache.commons:commons-vfs2:2.0",
    "mysqlConnector": "mysql:mysql-connector-java:5.1.34",
    "javaxInject": "javax.inject:javax.inject:1",
    "guice": "com.google.inject:guice:3.0",
    "hikariCp": "com.zaxxer:HikariCP-java6:2.2.5",
    "derby": "org.apache.derby:derby:10.11.1.1",
    "pegasus" : [
        "data" : "com.linkedin.pegasus:data:"+pegasusVersion,
        "generator" : "com.linkedin.pegasus:generator:"+pegasusVersion,
        "restliClient" : "com.linkedin.pegasus:restli-client:"+pegasusVersion,
        "restliServer" : "com.linkedin.pegasus:restli-server:"+pegasusVersion,
        "restliTools" : "com.linkedin.pegasus:restli-tools:"+pegasusVersion,
        "pegasusCommon" : "com.linkedin.pegasus:pegasus-common:"+pegasusVersion,
        "restliCommon" : "com.linkedin.pegasus:restli-common:"+pegasusVersion,
        "r2" : "com.linkedin.pegasus:r2:"+pegasusVersion,
        "d2" : "com.linkedin.pegasus:d2:"+pegasusVersion,
        "restliNettyStandalone" : "com.linkedin.pegasus:restli-netty-standalone:"+pegasusVersion
    ]
];

if (!isDefaultEnvironment)
{
  ext.externalDependency.each { overrideDepKey, overrideDepValue ->
    if (externalDependency[overrideDepKey] != null)
    {
      externalDependency[overrideDepKey] = overrideDepValue
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.12'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  sourceCompatibility = JavaVersion.VERSION_1_6

  configurations {
    compile
    dependencies {
      compile externalDependency.hadoop
      // compile externalDependency.hadoopCommon
      // compile externalDependency.hadoopClientCore
    }
  }

  if (isDefaultEnvironment)
  {
    task sourcesJar(type: Jar, dependsOn: classes) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }
    artifacts {
      archives sourcesJar
    }
  }

 // Configure the IDEA plugin to (1) add the codegen as source dirs and (2) work around
  // an apparent bug in the plugin which doesn't set the outputDir/testOutputDir as documented
  idea.module {
    // Gradle docs claim the two settings below are the default, but
    // the actual defaults appear to be "out/production/$MODULE_NAME"
    // and "out/test/$MODULE_NAME". Changing it so IDEA and gradle share
    // the class output directory.

    outputDir = sourceSets.main.output.classesDir
    testOutputDir = sourceSets.test.output.classesDir
  }

  afterEvaluate {
    // add the standard pegasus dependencies wherever the plugin is used
    if (project.plugins.hasPlugin('pegasus')) {
      dependencies {
        dataTemplateCompile externalDependency.pegasus.data
        restClientCompile externalDependency.pegasus.restliClient,externalDependency.pegasus.restliCommon,externalDependency.pegasus.restliTools
      }
    }
  }
}
