/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

dependencies {
  compile project(":gobblin-api")
  compile project(":gobblin-core")
  compile project(":gobblin-metastore")
  compile project(":gobblin-runtime")
  compile project(":gobblin-utility")

  compile externalDependency.jetty
  compile externalDependency.commonsCli
  compile externalDependency.commonsConfiguration
  compile externalDependency.commonsIo
  compile externalDependency.commonsLang
  compile externalDependency.commonsLang3
  compile externalDependency.findBugsAnnotations
  compile externalDependency.gson
  compile externalDependency.guava
  compile externalDependency.httpcore
  compile externalDependency.log4j
  compile externalDependency.metricsCore
  compile externalDependency.slf4j
  compile externalDependency.typesafeConfig

  testCompile project(":gobblin-example")

  // Required for adding Test class into classpath
  testCompile project(":gobblin-runtime").sourceSets.test.output
  testCompile project(path: ":gobblin-modules:gobblin-kafka-08:", configuration: "tests")
  testCompile project(path: ":gobblin-metastore", configuration: "testFixtures")
  testCompile project(":gobblin-test-utils")
  testCompile externalDependency.byteman
  testCompile externalDependency.bytemanBmunit
  testCompile externalDependency.calciteCore
  testCompile externalDependency.calciteAvatica
  testCompile externalDependency.curatorClient
  testCompile externalDependency.curatorTest
  testRuntime externalDependency.derby
  testCompile externalDependency.hamcrest
  testCompile externalDependency.jhyde
  testCompile externalDependency.mockito
  testCompile externalDependency.kafka08Test
}

task testJar(type: Jar, dependsOn: testClasses) {
  baseName = "test-${project.archivesBaseName}"
  from sourceSets.test.output
}

configurations {
  tests
}

configurations {
  compile {
    transitive = false
  }

  testRuntime {
    resolutionStrategy {
      force 'com.google.inject:guice:3.0'
    }
  }
}
