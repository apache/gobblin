{
	copymode:pull

	gobblin.selected: {

		daily: {
			selection : {
				policy.class = org.apache.gobblin.data.management.policy.NewestKSelectionPolicy
				newestK.versionsSelected = 730
			}
			version: {
				finder.class = org.apache.gobblin.data.management.version.finder.DateTimeDatasetVersionFinder
				globPattern = "*/*/*"
				datetime.pattern = "yyyy/MM/dd"
			}
		}

		hourly: {
			selection : {
				policy.class = org.apache.gobblin.data.management.policy.NewestKSelectionPolicy
				newestK.versionsSelected = 360
			}
			version: {
				finder.class = org.apache.gobblin.data.management.version.finder.DateTimeDatasetVersionFinder
				globPattern = "*/*/*/*"
				datetime.pattern = "yyyy/MM/dd/HH"
			}
		}

		snapshot: {
			selection : {
				policy.class = org.apache.gobblin.data.management.policy.NewestKSelectionPolicy
				newestK.versionsSelected = 3
			}
			version: {
				finder.class = org.apache.gobblin.data.management.version.finder.GlobModTimeDatasetVersionFinder
				version.globPattern = "*"
			}
		}

		sync: {
			selection : {
				policy.class = org.apache.gobblin.data.management.policy.NewestKSelectionPolicy
				newestK.versionsSelected = 1
			}
			version: {
				finder.class = org.apache.gobblin.data.management.version.finder.SingleVersionFinder
			}
		}
	}

	# defaults to sync
        gobblin.selected.policy=${gobblin.selected.sync}

	defaultDataFlowTopologies_PullMode{
		# source data generated on replica4
		cluster4{
			routes{
				# copy to replica4
				replica4:[source]
				replica3:[replica4,source]
				replica2:[replica3,replica4,source]
				replica1:[replica2,replica3,replica4,source]
			}
		 },
		# source data generated on replica3
		cluster3{
			routes{
				replica3:[source]
				replica4:[replica3,source]
				replica2:[replica4,replica3,source]
				replica1:[replica2,replica4,replica3,source]
			}
		 },
		# source data generated on replica1
		cluster1{
			routes{
				replica1:[source]
				replica2:[replica1,source]
				replica4:[replica2,replica1,source]
				replica3:[replica4,replica2,replica1,source]
			}
		 },
		# source data generated on replica2
		cluster2 {
			routes{
				replica2:[source]
				replica1:[replica2,source]
				replica3:[replica1,replica2,source]
				replica4:[replica3,replica1,replica2,source]
			}
		 }
	}


	metadata{
		jira:"jira-4455"
		owner:mitu
		name:profileTest
	}

	source	{
		hadoopfs{
			cluster.colo:coloX
			cluster.name: cluster1
			cluster.FsURI:"hdfs://coloX-cluster1nn01.grid.com:9000"
			path:/jobs/mitu/profileTest
		}
	}

	replicas{
		list:[replica4,replica3,replica1,replica2],
		replica4{
			hadoopfs{
				cluster.colo: coloY
				cluster.name: cluster4
				cluster.FsURI:"hdfs://coloY-cluster4nn01.grid.com:9000"
				path:/data/derived/oncluster4
			}
		},
		replica3{
			hadoopfs{
				cluster.colo: coloY
				cluster.name: cluster3
				cluster.FsURI:"hdfs://coloY-cluster3nn01.grid.com:9000"
				path:/data/derived/oncluster3
			}
		},
		replica1{
			hadoopfs{
				cluster.colo: coloX
				cluster.name: cluster1
				cluster.FsURI:"hdfs://coloX-cluster1nn01.grid.com:9000"
				path:/data/derived/oncluster1
			}
		},
		replica2{
                        hadoopfs{
                                cluster.colo: coloX
                                cluster.name: cluster2
				cluster.FsURI:"hdfs://coloX-cluster2nn01.grid.com:9000"
                                path:/data/derived/oncluster2
                        }
                },
	}

	dataFlowTopology {
	}

}
